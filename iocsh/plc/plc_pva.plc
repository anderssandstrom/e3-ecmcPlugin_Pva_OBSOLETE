static.AI:=static.AI+1;

# Register pv IOC_TEST:PLC-0-scantime when ecmc ioc has started
#if(get_ecmc_ioc_started() and not(static.aiHandle)) {
if(static.aiHandle<=0) {
  static.before1:=ec_get_time();
  static.aiHandle:=pv_reg('IOC_TEST:AI','pva');
  static.after1:=ec_get_time();
  ${DBG=#}println('pv_reg exe time [ns] : ', static.after1-static.before1);
};

# Read value of "IOC_TEST:PLC-0-scantime" when registered
if(static.aiHandle > 0) {
  static.before2:=ec_get_time();
  var retPvGet:=pv_get(static.aiHandle);
  static.after2:=ec_get_time();
  ${DBG=#}println('pv_get exe time [ns] : ', static.after2-static.before2);
  ${DBG=#}println('AI from PV:', retPvGet);
  ${DBG=#}println('AI in PLC :', static.AI);
};


if(static.aoHandle<=0) {
  static.aoHandle:=pv_reg('IOC_TEST:AO','pva');  
};

if(static.aoHandle > 0) {
  static.before3:=ec_get_time();
  var retPvPut:=pv_put(static.aoHandle,static.AI);
  static.after3:=ec_get_time();
  ${DBG=#}println('pv_put exe time [ns] : ', static.after3-static.before3);
  ${DBG=#}println('AO to PV:', static.AI);
  ${DBG=#}println('AO from PV:', static.AO);
};

#var retPvPut:=pv_put('test2',static.AI);
#${DBG=#}println('retPvPut:', retPvPut);
